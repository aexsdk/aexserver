EzDesk.devicesGrid = Ext.extend(Ext.grid.GridPanel, {	columnLines: true,    region: 'center',    initComponent: function(){        // Create RowActions Plugin        this.action = new EzDesk.RowActions({            header:EzDesk.devices.Locale.ActionText,            align: 'center',            keepSelection: true,            resizable: true,            width: 100,            actions: [            {            	tooltip: EzDesk.devices.Locale.DeviceTab,            	iconIndex: 'p_icon',                //qtipIndex: 'p_qtip',                hideIndex: 'p_hide'                //text: EzDesk.devices.Locale.DeviceTab            },{            	tooltip: EzDesk.devices.Locale.CDRTab,            	iconIndex: 'p_icon2',                 //qtipIndex: 'p_qtip2',                hideIndex: 'p_hide2'                //text: EzDesk.devices.Locale.CDRTab            },{            	tooltip: EzDesk.devices.Locale.RechateTab,            	iconIndex: 'p_icon3',                // qtipIndex: 'p_qtip3',                hideIndex: 'p_hide3'                //text: EzDesk.devices.Locale.RechateTab            },{            	tooltip: EzDesk.devices.Locale.RechageLogTab,            	iconIndex: 'p_icon4',                // qtipIndex: 'p_qtip3',                hideIndex: 'p_hide4'                //text: EzDesk.devices.Locale.RechateTab            },{            	tooltip: EzDesk.devices.Locale.EndpointTab,            	iconIndex: 'p_icon5',                // qtipIndex: 'p_qtip3',                hideIndex: 'p_hide5'                //text: EzDesk.devices.Locale.RechateTab            }]        });        // dummy action event handler - just outputs some arguments to console        this.action.on({            action: function(grid, record, action, row, col){        		var desktop = grid.app.getDesktop();	        	var data = record.data;	        	var chargeplan = Ext.util.JSON.decode(data.charge_plan);				switch(action) 				{					case 'icon-device-view':						new EzDesk.viewDevicesDialog(grid.app, grid.moduleId, grid, data, chargeplan);						break;					case 'icon-cdr-view':						new EzDesk.viewCDRDialog(grid.app, grid.moduleId, grid, data, chargeplan);						break;					case 'icon-recharge-add':						new EzDesk.RechargeDialog(grid.app, grid.moduleId, grid, data, chargeplan);						break;					case 'icon-recharge-view':						new EzDesk.viewRechageLogDialog(grid.app, grid.moduleId, grid, data, chargeplan);						break;						case 'icon-endpoint-view':						//alert('ok');						new EzDesk.viewEndpointDialog(grid.app, grid.moduleId, grid, data);						break;					}            }        });// eo privilege actions        // configure the grid		        Ext.apply(this, {            store: new Ext.data.GroupingStore({                reader: new Ext.data.JsonReader({                    id: 'id',                    totalProperty: 'totalCount',                    root: 'devices',                    fields: [{                        name: 'id',                        type: 'string'                    },{                        name: 'gu_id',                        type: 'string'                    }, {                        name: 'imei',                        type: 'string'                    }, {                        name: 'status',                        type: 'string'                    }, {                        name: 'is_time',                        type: 'string'                    }, {                        name: 'os_time',                        type: 'string'                    }, {                        name: 'active_time',                        type: 'string'                    }, {                        name: 'va_time',                        type: 'string'                    }, {                        name: 'vc_time',                        type: 'string'                    }, {                        name: 'charge_plan',                        type: 'string'                    }, {                        name: 'resaler',                        type: 'string'                    }, {                        name: 'bind_pno',                        type: 'string'                    }, {                        name: 'bind_epno',                        type: 'string'                    }, {                        name: 'vid',                        type: 'string'                    }, {                        name: 'pid',                        type: 'string'                    }, {                        name: 'remark',                        type: 'string'                    }, {                        name: 'p_qtip',                        type: 'string'                    }, {                        name: 'p_icon',                        type: 'string'                    }, {                        name: 'p_hide',                        type: 'boolean'                    }, {                        name: 'p_qtip2',                        type: 'string'                    }, {                        name: 'p_icon2',                        type: 'string'                    }, {                        name: 'p_hide2',                        type: 'boolean'                    }, {                        name: 'p_qtip3',                        type: 'string'                    }, {                        name: 'p_icon3',                        type: 'string'                    }, {                        name: 'p_hide3',                        type: 'boolean'                    }, {                        name: 'p_qtip4',                        type: 'string'                    }, {                        name: 'p_icon4',                        type: 'string'                    }, {                        name: 'p_hide4',                        type: 'boolean'                    }, {                        name: 'p_qtip5',                        type: 'string'                    }, {                        name: 'p_icon5',                        type: 'string'                    }, {                        name: 'p_hide5',                        type: 'boolean'                    }]                }),                proxy: new Ext.data.HttpProxy({                    url: this.app.connection,                    method: 'POST'                                }),                baseParams: {                    method: 'get_devices_info',                    moduleId: this.moduleId,                    query_condition: '',                    status: ''                },                listeners: {                    load: {                        scope: this,                        fn: function(){                            this.getSelectionModel().selectFirstRow();                        }                    }                }            }),            columns: [{                id: 'gu_id',                header:	EzDesk.devices.Locale.devices_grid.bsn,                width: 150,                align: 'center',                resizable: true,                dataIndex: 'gu_id'            }, {                id: 'imei',                header: EzDesk.devices.Locale.devices_grid.imei,                width: 240,                align: 'center',                resizable: true,                dataIndex: 'imei'            }, {                id: 'bind_pno',                header: EzDesk.devices.Locale.devices_grid.bind_pno,                width: 120,                align: 'center',                resizable: true,                dataIndex: 'bind_pno'            }, {                id: 'bind_epno',                header:	EzDesk.devices.Locale.devices_grid.bind_epno,                width: 120,                align: 'center',                resizable: true,                dataIndex: 'bind_epno'            }, {                id: 'active_time',                header:	EzDesk.devices.Locale.devices_grid.active_time,                width: 120,                align: 'center',                resizable: true,                dataIndex: 'active_time'            },this.action],            plugins: [this.action],            loadMask: true,            viewConfig: {                forceFit: true            }        }); // eo apply        // add paging toolbar        this.bbar = new Ext.PagingToolbar({            store: this.store,            displayInfo: true,            pageSize: 20        });                // call parent        EzDesk.devicesGrid.superclass.initComponent.apply(this, arguments);    } // eo function initComponent    ,    onRender: function(){        // call parent        EzDesk.devicesGrid.superclass.onRender.apply(this, arguments);        // load the store        this.store.load({            params: {                start: 0,                limit: 20            }        });    } // eo function onRender}); // eo extend gridExt.reg('devices_grid_panel', EzDesk.devicesGrid);/** wirter: lion wang * caption: view devices* version: 1.0 * time: 2010-11-14* last time: 2010-11-14*/EzDesk.viewDevicesDialog = function(app, moduleId, grid, data, chargeplan){   var desktop = app.getDesktop();   var winManager = desktop.getManager();   EzDesk.FormUi = Ext.extend(Ext.form.FormPanel, {       labelWidth: 75,       labelAlign: 'left',       layout: 'form',       id: 'viewDevicesDialog',      // padding: 10,      // frame: true,       initComponent: function(){           this.items = [{        	   xtype:'tabpanel',               activeTab: 0,               defaults:{autoHeight:true, bodyStyle:'padding:10px'},                items:[{                   title : EzDesk.devices.Locale.DeviceTab,                   layout:'form',                   defaults: {width: 230},                   defaultType: 'textfield',                   items: [{                       xtype: 'textfield',                       fieldLabel: EzDesk.devices.Locale.devices_grid.VID,                       anchor: '97%',                       value : data.vid,                       name: 'vid'                   }, {                       xtype: 'textfield',                       fieldLabel: EzDesk.devices.Locale.devices_grid.PID,                       anchor: '97%',        				value : data.pid,                       name: 'pid'                   }, {                       xtype: 'textfield',                       fieldLabel: EzDesk.devices.Locale.devices_grid.status,                       anchor: '97%',                       name: 'status',                       value : data.status                   }, {                       xtype: 'textfield',                       fieldLabel: EzDesk.devices.Locale.devices_grid.is_time,                       anchor: '97%',                       value : data.is_time,                       name: 'is_time'                   }, {                       xtype: 'textfield',                       fieldLabel: EzDesk.devices.Locale.devices_grid.os_time,                       anchor: '97%',                       value : data.os_time,                       name: 'os_time'                   }, {                       xtype: 'textfield',                       fieldLabel: EzDesk.devices.Locale.devices_grid.active_time,                       anchor: '97%',                       value : data.active_time,                       name: 'active_time'                   }, {                       xtype: 'textfield',                       fieldLabel: EzDesk.devices.Locale.devices_grid.va_time,                       anchor: '97%',                       value : data.va_time,                       name: 'va_time'                   }, {                       xtype: 'textfield',                       fieldLabel: EzDesk.devices.Locale.devices_grid.vc_time,                       anchor: '97%',        				value : data.vc_time,                       name: 'vc_time'                   }//                   , {//                       xtype: 'textfield',//                       fieldLabel: EzDesk.devices.Locale.devices_grid.remark,//                       anchor: '97%',//                       value : data.remark,//                       name: 'remark'//                   }                   ]                      		},{                    title: EzDesk.devices.Locale.BillingTab,                    layout:'form',                    defaults: {width: 230},                    defaultType: 'textfield',                    items: [{                        xtype: 'textfield',                        fieldLabel: EzDesk.devices.Locale.devices_grid.agent_id,                        anchor: '77%',                        name: 'agent_id',                        value : chargeplan.agent_id                    }, {                        xtype: 'textfield',                        fieldLabel: EzDesk.devices.Locale.devices_grid.agent_cs,                        anchor: '77%',         				value : chargeplan.agent_cs,                        name: 'agent_cs'                    }, {                        xtype: 'textfield',                        fieldLabel: EzDesk.devices.Locale.devices_grid.user_cs,                        anchor: '87%',         				value : chargeplan.call_cs,                        name: 'user_cs'                    }, {                        xtype: 'textfield',                        fieldLabel: EzDesk.devices.Locale.devices_grid.balance,                        anchor: '77%',         				value : chargeplan.balance,                        name: 'balance'                    }, {                        xtype: 'textfield',                        fieldLabel: EzDesk.devices.Locale.devices_grid.currency_type,                        anchor: '77%',         				value : chargeplan.currency_type,                        name: 'currency_type'                    }, {                        xtype: 'textfield',                        fieldLabel: EzDesk.devices.Locale.devices_grid.free_period,                        anchor: '77%',         				value : chargeplan.free_period,                        name: 'free_period'                    }, {                        xtype: 'textfield',                        fieldLabel: EzDesk.devices.Locale.devices_grid.hire_number,                        anchor: '77%',         				value : chargeplan.hire_number,                        name: 'hire_number'                    }, {                        xtype: 'textfield',                        fieldLabel: EzDesk.devices.Locale.devices_grid.valid_date,                        anchor: '77%',         				value : chargeplan.valid_date_no,                        name: 'valid_date_no'                    }]           		}]           }];           this.fbar = {               xtype: 'toolbar',               items: [{                   xtype: 'button',                   text: EzDesk.devices.Locale.Close               }, {                   xtype: 'button',                   text: EzDesk.devices.Locale.UnBind,                   hidden : app.isAllowedTo('unbind', moduleId) ? false : true,                   handler: function(){                       // Ext.get('')                       Ext.getCmp('editVPNForm').getForm().submit({                           url: app.connection,                           waitMsg: 'Loading',                           method: 'POST',                           params: {                               action: 'vpn_edit',                               moduleId: moduleId,								o_e164: data.E164,								o_pid: data.PID,								o_vid: data.VID                           },                           success: function(addUserForm, action){                               // b.setDisabled(false);                               var obj = Ext.util.JSON.decode(action.response.responseText);                               // addUserForm.getForm().reset();								 grid.store.load({						            params: {						                start: 0,						                limit: 20						            }       						});                               EzDesk.showMsg('VPN Bandwidth', obj.message, desktop);                           },                           failure: function(addUserForm, action){                               // bbtn.setDisabled(false);                               obj = Ext.util.JSON.decode(action.response.responseText);                               if (action.failureType == 'server') {                                   EzDesk.showMsg('VPN Bandwidth', obj.message, desktop);                               }                               else {                                   EzDesk.showMsg('VPN Bandwidth', obj.message, desktop);                               }                           }                       });                   }               }]           };           EzDesk.FormUi.superclass.initComponent.call(this);       }   });  	   var colse = function(){       this.dialog.hide();   };      if (!this.dialog) {       this.dialog = new Ext.Window({           title: EzDesk.devices.Locale.DeviceTab,           bodyStyle: 'padding:10px',           layout: 'fit',           width: 400,           height: 390,           closeAction: 'hide',           plain: true,           items: [new EzDesk.FormUi()],           manager: winManager,           modal: true       });   }   this.dialog.show();};/** wirter: lion wang * caption: view devices* version: 1.0 * time: 2010-11-14* last time: 2010-11-14*/EzDesk.RechargeDialog = function(app, moduleId, grid, data, chargeplan){   var desktop = app.getDesktop();   var winManager = desktop.getManager();   EzDesk.FormUi = Ext.extend(Ext.form.FormPanel, {       labelWidth: 75,       labelAlign: 'left',       layout: 'form',       id: 'deviceRechargeDialog',      // padding: 10,      // frame: true,       initComponent: function(){           this.items = [{               xtype: 'textfield',               fieldLabel: EzDesk.devices.Locale.Endpoint,               anchor: '97%',               value : data.bind_epno,               name: 'endpoint',               disabled: true           }, {               xtype: 'textfield',               fieldLabel: EzDesk.devices.Locale.RechargePIN,               anchor: '97%',               name: 'pin'           }, {               xtype: 'textfield',               fieldLabel: EzDesk.devices.Locale.RechargePWD,               anchor: '97%',               name: 'pwd'           }, {               xtype: 'textfield',               fieldLabel: EzDesk.devices.Locale.RechargeBalance,               anchor: '97%',               name: 'balance',               hidden : app.isAllowedTo('input_balance', this.moduleId) ? true : false           }, {               xtype: 'textfield',               fieldLabel: EzDesk.devices.Locale.Remark,               anchor: '97%',               name: 'remark'           }];           this.fbar = {               xtype: 'toolbar',               items: [{                   xtype: 'button',                   text: EzDesk.devices.Locale.Close               }, {                   xtype: 'button',                   text: EzDesk.devices.Locale.Recharge,                   handler: function(){            	   		Ext.getCmp('deviceRechargeDialog').getForm().submit({                           url: app.connection,                           waitMsg: 'Loading',                           method: 'POST',                           params: {            	   				method: 'web_recharge',            	   				moduleId: moduleId,            	   				endpoint: data.bind_epno                           },                           success: function(addUserForm, action){                        	   obj = Ext.util.JSON.decode(action.response.responseText);                               EzDesk.showMsg(EzDesk.devices.Locale.Recharge, obj.message, desktop);                           },                           failure: function(addUserForm, action){                               // bbtn.setDisabled(false);                               obj = Ext.util.JSON.decode(action.response.responseText);                               if (action.failureType == 'server') {                                   EzDesk.showMsg(EzDesk.devices.Locale.Recharge, obj.message, desktop);                               }                               else {                                   EzDesk.showMsg(EzDesk.devices.Locale.Recharge, obj.message, desktop);                               }                           }                       });                   }               }]           };           EzDesk.FormUi.superclass.initComponent.call(this);       }   });  	   var colse = function(){       this.dialog.hide();   };      if (!this.dialog) {       this.dialog = new Ext.Window({           title: EzDesk.devices.Locale.RechargeTab,           bodyStyle: 'padding:10px',           layout: 'fit',           width: 300,           height: 200,           closeAction: 'close',           plain: true,           items: [new EzDesk.FormUi()],           manager: winManager,           modal: true       });   }   this.dialog.show();};/** wirter: lion wang * caption: view CDR* version: 1.0 * time: 2010-11-14* last time: 2010-11-22*/EzDesk.viewCDRDialog = function(app, moduleId, grid, data ,chargeplan){   var desktop = app.getDesktop();   var winManager = desktop.getManager();      var colse = function(){       this.dialog.hide();   };      if (!this.dialog) {	   this.dialog = new Ext.Window({	       title: EzDesk.devices.Locale.CDRTab,	       bodyStyle: 'padding:10px',	       layout: 'fit',	       width: 950,	       height: 500,	       closeAction: 'close',	       plain: true,	       items: [{	    	   	xtype: 'cdr-grid-panel',	   			region: 'center',				id:'cdr_grid_pannel_obj',				name: 'cdr_grid_pannel_obj',				app:  app,				connect : app.connection,				desktop: desktop,				moduleId: moduleId,				data : data	       }],	       manager: winManager,	       modal: true	   });   }   this.dialog.show();};/** wirter: lion wang * caption: view CDR* version: 1.0 * time: 2010-11-14* last time: 2010-11-22*/EzDesk.viewRechageLogDialog = function(app, moduleId, grid, data ,chargeplan){   var desktop = app.getDesktop();   var winManager = desktop.getManager();      var colse = function(){       this.dialog.hide();   };      if (!this.dialog) {	   this.dialog = new Ext.Window({	       title: EzDesk.devices.Locale.RechageLogTab,	       bodyStyle: 'padding:10px',	       layout: 'fit',	       width: 950,	       height: 500,	       closeAction: 'close',	       plain: true,	       items: [{	    	   	xtype: 'financial_grid_panel',	   			region: 'center',				id: 'financial_grid_panel',				name: 'financial_grid_panel',				app		: app,				connect : app.connection,				desktop	: desktop,				moduleId: moduleId,				data 	: data	       }],	       manager: winManager,	       modal: true	   });   }   this.dialog.show();};EzDesk.viewEndpointDialog = function(app, moduleId, grid, data){	var desktop = app.getDesktop();    var winManager = desktop.getManager();    var connect = app.connection;    var app = app;   	var e164 = data.bind_epno;   	var bsn = data.gu_id;   	var imei = data.imei;   	var pno = data.bind_pno;    var colse = function(){        this.dialog.hide();    };        if (!this.dialog) {        this.dialog = new Ext.Window({            title: EzDesk.devices.Locale.EndpointTab,            bodyStyle: 'padding:10px',            layout: 'fit',            width: 700,            height: 308,            closeAction: 'close',            plain: true,            items: [                new EzDesk.viewEndpointFormUi({                	id: 'viewEndpointFormUi',                	app : app,                	connect: connect,                    moduleId: moduleId,                    desktop: desktop,                    e164 : e164,                    bsn : bsn,                	imei : imei,                	pno : pno                })            ],            manager: winManager,            modal: true        });    }	    Ext.getCmp('viewEndpointFormUi').getForm().load({		url:connect,		waitMsg:'Loading...',		params: {		  	method : 'get_ep_list',	        moduleId: moduleId,	        type: '0,1',			status : '0,1,2',			endpoint: data.bind_epno	    },	    failure: function(form, action){	        Ext.MessageBox.alert(lang_tr.Warning, lang_tr.ConnectServerError);	    },	    success: function(form, action ){	    	var obj = Ext.util.JSON.decode(action.response.responseText);	    	//EzDesk.showMsg(EzDesk.resalers.Locale.AddAgent, obj.message, desktop);	    	Ext.getCmp('endpointBUserCS').setValue(obj.data.cs_id);	    	Ext.getCmp('endpointStatus').setValue(obj.data.status);	    		    }	});       this.dialog.show();};EzDesk.viewEndpointFormUi = Ext.extend(Ext.form.FormPanel, {    labelWidth: 110,    labelAlign: 'left',    layout: 'form',    padding: 10,    frame: true,    initComponent: function(){		var app = this.app;		var connect = this.connect;	    var moduleId = this.moduleId;	    var desktop = this.desktop;	    var status0 = EzDesk.devices.Locale.Status0;	    var status1 = EzDesk.devices.Locale.Status1;	    var status2 = EzDesk.devices.Locale.Status2;	    var e164 = this.e164;	    var	bsn = this.bsn;	    var	imei = this.imei;	    var	pno = this.pno;	    this.items = [{		    	 // column layout with 2 columns	    	layout:'column'	    	,width: '130'	    	 // defaults for columns	    	 ,defaults:{		    	 columnWidth:0.5		    	 ,layout:'form'		    	 ,border:false		    	 ,xtype:'panel'		    	 ,bodyStyle:'padding:0 18px 0 0'		 	}		 	,items:[{		    	 // left column		    	 // defaults for fields		    	defaults:{anchor:'100%'}		 		,items:[{		            xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.E164,		            anchor: '100%',		            name: 'E164',					disabled  :true ,		            allowBlank: false		        },{		         	xtype: 'combo',                    name: 'status',                    id: 'endpointStatus',                    hiddenName: 'value',                    store: new Ext.data.SimpleStore({                        fields: ['value', 'text'],                        data: [[0, status0], [1, status1], [2, status2]]                    }),                    valueField: 'value',                    fieldLabel: EzDesk.devices.Locale.Status,                    displayField: 'text',                    editable: false,                    typeAhead: true,                    mode: 'local',                    triggerAction: 'all',                    selectOnFocus: false,                    forceSelection: true		        }]			},{		    	 // right column		    	 // defaults for fields		    	 defaults:{anchor:'100%'}		    	 ,items:[{			        	xtype: 'textfield',			            fieldLabel: 'H323ID',			            anchor: '100%',			            name: 'h323id',						disabled  :true ,			            allowBlank: false			     },{		        	xtype: 'checkbox',		            fieldLabel: EzDesk.devices.Locale.Bind_SN,		            anchor: '100%',		            name: 'Bind_SN'			    }]			}]	    },{		    	 // column layout with 2 columns	    	layout:'column'	    	,width: '130'	    	 // defaults for columns	    	 ,defaults:{		    	 columnWidth:0.5		    	 ,layout:'form'		    	 ,border:false		    	 ,xtype:'panel'		    	 ,bodyStyle:'padding:0 18px 0 0'		 	}		 	,items:[{		    	 // right column		    	 // defaults for fields		    	 defaults:{anchor:'100%'}		    	 ,items:[{		        	xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.Agent,		            disabled  :true ,		            anchor: '100%',		            name: 'AgentName'			    }]			},{		    	 // right column		    	 // defaults for fields		    	 defaults:{anchor:'100%'}		    	 ,items:[{		            xtype: 'BUserCSType',		        	id: 'endpointBUserCS',		        	name: 'user_cs',		        	anchor: '100%',		        	fieldLabel: EzDesk.devices.Locale.UserPlan,		        	connection: connect,		            moduleId: moduleId,		            desktop: desktop		        }]			}]	    },{	    	 // column layout with 2 columns	    	 layout:'column'	    	 // defaults for columns	    	 ,defaults:{		    	 columnWidth:0.5		    	 ,layout:'form'		    	 ,border:false		    	 ,xtype:'panel'		    	 ,bodyStyle:'padding:0 18px 0 0'		 	}		 	,items:[{		    	 // left column		    	 // defaults for fields		    	defaults:{anchor:'85%'}		 		,items:[		        {		        	xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.CurrentBalance,		            anchor: '100%',		            name: 'Balance',					disabled  :true ,		            allowBlank: false		        }]			},{		    	 // right column		    	 // defaults for fields		    	 defaults:{anchor:'100%'}		    	 ,items:[		        {		        			        	xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.CurrencyType,		            anchor: '100%',		            disabled  :true ,		            name: 'CurrencyType'			    }]			}]	    },{	    	 // column layout with 2 columns	    	 layout:'column'	    	 // defaults for columns	    	 ,defaults:{		    	 columnWidth:0.5		    	 ,layout:'form'		    	 ,border:false		    	 ,xtype:'panel'		    	 ,bodyStyle:'padding:0 18px 0 0'		 	}		 	,items:[{		    	 // left column		    	 // defaults for fields		    	defaults:{anchor:'100%'}		 		,items:[{		            xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.FreeTime,		            anchor: '100%',		            name: 'e164',					disabled  :true ,		            allowBlank: false,		            value: 0		        }]			},{		    	 // right column		    	 // defaults for fields		    	 defaults:{anchor:'100%'}		    	 ,items:[{		         	xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.HireDuration,		            disabled  :true ,		            anchor: '100%',		            name: 'HireDuration'		        }]			}]	    },{	    	 // column layout with 2 columns	    	 layout:'column'	    	 // defaults for columns	    	 ,defaults:{		    	 columnWidth:0.5		    	 ,layout:'form'		    	 ,border:false		    	 ,xtype:'panel'		    	 ,bodyStyle:'padding:0 18px 0 0'		 	}		 	,items:[{		    	 // left column		    	 // defaults for fields		    	defaults:{anchor:'100%'}		 		,items:[{		            xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.ActiveTime,		            anchor: '100%',		            name: 'ActiveTime',					disabled  :true ,		            allowBlank: false		        },{		        	xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.FirstCallTime,		            anchor: '100%',		            name: 'FirstCall',					disabled  :true ,		            allowBlank: false		        }]			},{		    	 // right column		    	 // defaults for fields		    	 defaults:{anchor:'100%'}		    	 ,items:[{		         	xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.Hiredate,		            anchor: '100%',		            disabled  :true ,		            name: 'HireDate'		        },{		        			        	xtype: 'textfield',		            fieldLabel: EzDesk.devices.Locale.LastCallTime,		            anchor: '100%',		            disabled  :true ,		            name: 'LastCall'			    }]			}]	    }];	    		        this.fbar = {            xtype: 'toolbar',            items: [{                xtype: 'button',                text: EzDesk.devices.Locale.Close            }, {                xtype: 'button',                text: EzDesk.devices.Locale.Save,                hidden : app.isAllowedTo('edit_ep_info', moduleId) ? false : true,                handler: function(){	            	Ext.getCmp('viewEndpointFormUi').getForm().submit({	                    url: connect,	                    waitMsg: 'Loading',	                    method: 'POST',	                    params: {	                		method: 'edit_ep_info',	                        moduleId: moduleId,	                        e164: e164	                    },	                    success: function(addUserForm, action){	                        var obj = Ext.util.JSON.decode(action.response.responseText);	                        EzDesk.showMsg('', obj.message, desktop);	                    },	                    failure: function(addUserForm, action){	                        //bbtn.setDisabled(false);	                        obj = Ext.util.JSON.decode(action.response.responseText);	                        if (action.failureType == 'server') {	                            EzDesk.showMsg('', obj.message, desktop);	                        }	                        else {	                            EzDesk.showMsg('', obj.message, desktop);	                        }	                    }	                });                }            }, {                xtype: 'button',                text: EzDesk.devices.Locale.UnbindTool,                hidden : app.isAllowedTo('dt_unbind', this.moduleId) ? false : true,                handler: function(){	            	Ext.getCmp('viewEndpointFormUi').getForm().submit({	                    url: connect,	                    waitMsg: 'Loading',	                    method: 'POST',	                    params: {	                		method: 'dt_unbind',	                        moduleId: moduleId,	                        e164: e164,	                        bsn: bsn,	                        imei: imei,	                        pno: pno	                    },	                    success: function(addUserForm, action){	                        var obj = Ext.util.JSON.decode(action.response.responseText);	                        EzDesk.showMsg('', obj.message, desktop);	                    },	                    failure: function(addUserForm, action){	                        //bbtn.setDisabled(false);	                        obj = Ext.util.JSON.decode(action.response.responseText);	                        if (action.failureType == 'server') {	                            EzDesk.showMsg('', obj.message, desktop);	                        }	                        else {	                            EzDesk.showMsg('', obj.message, desktop);	                        }	                    }	                });                }            }]        };        EzDesk.viewEndpointFormUi.superclass.initComponent.call(this);    }});EzDesk.CDRGrid = Ext.extend(Ext.grid.GridPanel, {    columnLines: true	,region : 'center'	,initComponent:function() {			var from = new Date((new Date()).getFullYear(),(new Date()).getMonth(),(new Date()).getDate());		var to = new Date((new Date()).getFullYear(),(new Date()).getMonth(),(new Date()).getDate()+1);				// Create RowActions Plugin		this.action = new EzDesk.RowActions({			 header: EzDesk.devices.Locale.Action			,align: 'center'			,keepSelection:true			,actions:[				{					iconCls: 'icon-wrench'					//,tooltip: EzDesk.voip_cdr.Locale.ViewTooltip					//,qtipIndex: 'p_qtip'					//,iconIndex: 'p_icon'					//,hideIndex: 'p_hide'					,text: EzDesk.devices.Locale.View				}			]		});		// dummy action event handler - just outputs some arguments to console		this.action.on({			action:function(grid, record, action, row, col) {				//new EzDesk.endpointViewDialog(grid.app, grid.moduleId, record.data);			}					});//eo privilege  actions		// configure the grid		Ext.apply(this, {			//autoWidth: true			//height: 344			store : new Ext.data.GroupingStore({				reader : new Ext.data.JsonReader({					 idProperty: 'CDRDatetime'					,totalProperty: 'totalCount'					,root: 'data'					,messageProperty:'message'					,successProperty: 'success'					,fields:[						{name: 'CDRDatetime', type: 'string'}						,{name: 'SessionID', type: 'string'}						,{name: 'AcctStartTime', type: 'string'}						,{name: 'PN_E164', type: 'string'}						,{name: 'CallerID', type: 'string'}						,{name: 'CalledID', type: 'string'}						,{name: 'SessionTimeMin', type: 'string'}						,{name: 'AcctSessionFee', type: 'string'}						,{name: 'Currency', type: 'string'}						,{name: 'Guid_SN', type: 'string'}					]				})				,proxy:new Ext.data.HttpProxy({					url : this.connect					,method : 'POST'									})				,baseParams: {					method: 'cdr_list',					moduleId: this.moduleId,					from: from,					to : to,					caller:'',					callee:'',					endpoint: this.data.bind_epno,					type: ''				}				,listeners:{					load:{scope:this, fn:function() {						this.getSelectionModel().selectFirstRow();					}}				}			})			,columns:[				{id:'AcctStartTime',header:EzDesk.devices.Locale.AcctStartTime,width: 140, align: 'Left',resizable: true, dataIndex: 'AcctStartTime'}				,{id:'SessionID', header: 'SessionID', width: 120, align: 'Left',resizable: true, dataIndex: 'SessionID'}				,{id:'Guid_SN', header: 'IMEI', width: 120, align: 'Left',resizable: true, dataIndex: 'Guid_SN'}				,{id:'PN_E164', header: EzDesk.devices.Locale.E164, width: 100, align: 'Left',resizable: true, dataIndex: 'PN_E164',hidden:true}				,{id:'CallerID',header: EzDesk.devices.Locale.CallerID, width: 120, align: 'Left',resizable: true, dataIndex: 'CallerID'}				,{id:'CalledID',header: EzDesk.devices.Locale.CalleeID, width: 160, align:'Left',resizable: true,dataIndex:'CalledID'}				,{id:'SessionTimeMin',header: EzDesk.devices.Locale.SessionTimeMin, width: 70, align: 'Right',resizable: true,dataIndex:'SessionTimeMin'}				,{id:'AcctSessionFee',header: EzDesk.devices.Locale.AcctSessionFee, width: 70, align: 'Right',resizable: true,dataIndex:'AcctSessionFee'}				,{id:'Currency',header: EzDesk.devices.Locale.Currency, width: 80, align: 'Right',resizable: true,dataIndex:'Currency'}							]			,plugins:[this.action]			,loadMask:true			,viewConfig:{forceFit:true}		}); // eo apply		// add paging toolbar		this.bbar = {			 xtype:'paging'			,store:this.store			,displayInfo:true			,pageSize:20			//,plugins: new Ext.ux.ProgressBarPager()		};		this.tbar = {            xtype: 'toolbar',            items: [                {                    xtype: 'buttongroup',                    columns: 2,                    id: 'btg_cdr_type',                    items: [                        {                            xtype: 'button',                            text: 'Runtime',                            id: 'fd_runtime',                            allowDepress: true,                            enableToggle: true,                            toggleGroup:'type',                            pressed: true,                            clickEvent: 'click'                        },                        {                            xtype: 'button',                            text: 'History',                            id: 'fd_history',                            allowDepress: true,                            enableToggle: true,                            toggleGroup:'type',                            pressed: false,                            clickEvent: 'click'                        }                    ]                },                {                    xtype: 'tbseparator'                },                {                    xtype: 'tbtext',                    text: lang_tr.From                },                {                    xtype: 'datefield',                    width: 150,                    id: 'fd_cdr_from',                    format:'Y-m-d H:i:s',                    value: from                   },                {                    xtype: 'tbtext',                    text: lang_tr.To                },                {                    xtype: 'datefield',                    width: 150,                    id: 'fd_cdr_to',                    format:'Y-m-d H:i:s',                    value: to                 },                {                    xtype: 'tbseparator'                },                {                    xtype: 'tbtext',                    text: 'Caller'                },                {                    xtype: 'textfield',                    fieldLabel: 'Label',                    width: 100,                    id: 'fd_caller_filter'                },                {                    xtype: 'tbtext',                    text: 'Callee'                },                {                    xtype: 'textfield',                    fieldLabel: 'Label',                    width: 100,                    id: 'fd_callee_filter'                },                {                    xtype: 'tbfill'                },                {                    xtype: 'tbtext',                    text: 'Filter'                },                {                    xtype: 'textfield',                    width: 100,                    id: 'fdr_endpoint_filter',                    value: this.data.bind_epno,                    disable: true                },                {                    xtype: 'button',                    text: EzDesk.devices.Locale.Query,                    handler: function(){	    				var fdr_from = Ext.getCmp('fd_cdr_from');	    				var fdr_to = Ext.getCmp('fd_cdr_to');	    				var fdr_caller = Ext.getCmp('fd_caller_filter');	    				var fdr_callee = Ext.getCmp('fd_callee_filter');	    				var fdr_filter = Ext.getCmp('fdr_endpoint_filter');	    				var fdr_rt = Ext.getCmp('fd_runtime');	    					    				var from = fdr_from?fdr_from.getValue():'';	    				var to = fdr_to?fdr_to.getValue():'';	    				var caller = fdr_caller?fdr_caller.getValue():'';	    				var callee = fdr_callee?fdr_callee.getValue():'';	    				var filter = fdr_filter?fdr_filter.getValue():'';	    				var type = fdr_rt? (fdr_rt.pressed?0:1):0;	    					    				if(fdr_from && (!Ext.isDate(from))){	    					pfrom = new Date();	    					//alert(pfrom.format('Y-m-d H:i:s'));	    					from = new Date(pfrom.getFullYear(),pfrom.getMonth(),0);	    					alert(from.format('Y-m-d H:i:s'));	    					fdr_from.setValue(from);	    				}	    				if(fdr_to && (!Ext.isDate(to))){	    					pto = new Date();	    					//alert(pfrom.format('Y-m-d H:i:s'));	    					to = new Date(pto.getFullYear(),pto.getMonth()+1,0);	    					//alert(to.format('Y-m-d H:i:s'));	    					fdr_to.setValue(from);	    				}	    				var grid = Ext.getCmp('cdr_grid_pannel_obj');	    				if(grid){	    					//alert(grid.xtype);	    					grid.store.setBaseParam('from',from.format('Y-m-d H:i:s'));	    					grid.store.setBaseParam('to',to.format('Y-m-d H:i:s'));	    					grid.store.setBaseParam('caller',caller.toString());	    					grid.store.setBaseParam('callee',callee.toString());	    					grid.store.setBaseParam('endpoint',filter.toString());	    					grid.store.setBaseParam('type',type.toString());	    					grid.store.load({	    						params:{start:0, limit:20}	    						,callback :function(r,options,success) {		    							if(!success){	    								var notifyWin = this.desktop.showNotification({	    							        html: this.store.reader.jsonData.message||this.store.reader.jsonData.msg	    									, title: lang_tr.Error	    							      });	    							}	    						}	    						,scope:grid	    					});	    				}	    			},                    scope:this                }            ]        };		// call parent		EzDesk.CDRGrid.superclass.initComponent.apply(this, arguments);	} // eo function initComponent	,onRender:function() {		// call parent		EzDesk.CDRGrid.superclass.onRender.apply(this, arguments);		// load the store		this.store.load({			params:{start:0, limit:20}			,callback :function(r,options,success) {					if(!success){					var notifyWin = this.desktop.showNotification({				        html: this.store.reader.jsonData.message.toString()						, title: lang_tr.Error				      });				}			}			,scope:this		});	} // eo function onRender}); // eo extend gridExt.reg('cdr-grid-panel',EzDesk.CDRGrid);EzDesk.FinancialGrid = Ext.extend(Ext.grid.GridPanel, {    columnLines: true,    region: 'center',    initComponent: function(){		var from = new Date((new Date()).getFullYear(),(new Date()).getMonth(),(new Date()).getDate()-90);		var to = new Date((new Date()).getFullYear(),(new Date()).getMonth(),(new Date()).getDate()+1);	//        // Create RowActions Plugin        this.action = new EzDesk.RowActions({            header: EzDesk.devices.Locale.Actions,            align: 'center',            keepSelection: true,            actions: [{                iconCls: 'icon-wrench',                tooltip: EzDesk.devices.Locale.ViewTooltip //,qtipIndex: 'p_qtip'                //,iconIndex: 'p_icon'                //,hideIndex: 'p_hide'                //,                //text: EzDesk.financial.Locale.View            }]        });        // dummy action event handler - just outputs some arguments to console        // configure the grid        Ext.apply(this, {            //autoWidth: true            //height: 344            store: new Ext.data.GroupingStore({                reader: new Ext.data.JsonReader({                    idProperty: 'id',                    totalProperty: 'totalCount',                    root: 'data',                    messageProperty: 'message',                    successProperty: 'success',                    fields: [{                        name: 'id',                        type: 'string'                    },{                        name: 'H_Datetime',                        type: 'string'                    }, {                        name: 'E164',                        type: 'string'                    }, {                        name: 'Cost',                        type: 'string'                    }, {                        name: 'RealCost',                        type: 'string'                    }, {                        name: 'RC_Code',                        type: 'string'                    }, {                        name: 'Remark',                        type: 'string'                    }, {                        name: 'Pno',                        type: 'string'                    }, {                        name: 'Guid_SN',                        type: 'string'                    }, {                        name: 'CS_Name',                        type: 'string'                    }, {                        name: 'SourcePin',                        type: 'string'                    }, {                        name: 'Agent_Name',                        type: 'string'                    }, {                        name: 'CurrencyType',                        type: 'string'                    }]                }),                proxy: new Ext.data.HttpProxy({                    url: this.connect,                    method: 'POST'                                }),                baseParams: {                    method: 'get_recharge_log',                    moduleId: this.moduleId,                    from: from,					to : to,					endpoint: this.data.bind_epno				},                listeners: {                    load: {                        scope: this,                        fn: function(){                            this.getSelectionModel().selectFirstRow();                        }                    }                }            })                  ,            columns: [{                id: 'H_Datetime',                header: EzDesk.devices.Locale.H_Datetime,                width: 140,                align: 'Center',                resizable: true,                dataIndex: 'H_Datetime'            }, {                id: 'E164',                header: EzDesk.devices.Locale.E164,                width: 120,                align: 'Center',                resizable: true,                dataIndex: 'E164'            },{                id: 'RC_Code',                header: EzDesk.devices.Locale.RC_Code,                width: 80,                align: 'Center',                resizable: true,                dataIndex: 'RC_Code'            }, {                id: 'Pno',                header: EzDesk.devices.Locale.Pno,                width: 140,                align: 'Center',                resizable: true,                dataIndex: 'Pno'            }, {                id: 'Guid_SN',                header: EzDesk.devices.Locale.Guid_SN,                width: 140,                align: 'Center',                resizable: true,                dataIndex: 'Guid_SN'            }, {                id: 'CS_Name',                header: EzDesk.devices.Locale.CS_Name,                width: 80,                align: 'Center',                resizable: true,                dataIndex: 'CS_Name'            }, {                id: 'Agent',                header: EzDesk.devices.Locale.Agent,                width: 80,                align: 'Center',                resizable: true,                dataIndex: 'Agent_Name'            },            {                id: 'Cost',                header: EzDesk.devices.Locale.Cost,                width: 60,                align: 'Center',                resizable: true,                dataIndex: 'Cost'            }, {                id: 'RealCost',                header: EzDesk.devices.Locale.RealCost,                width: 60,                align: 'Center',                resizable: true,                dataIndex: 'RealCost'            }, {                id: 'CurrencyType',                header: EzDesk.devices.Locale.CurrencyType,                width: 30,                align: 'Center',                resizable: true,                dataIndex: 'CurrencyType'            }, {                id: 'Remark',                header: EzDesk.devices.Locale.Remark,                width: 180,                align: 'Center',                resizable: true,                dataIndex: 'Remark'            }],            plugins: [this.action]                        ,view: new Ext.grid.GroupingView({            	forceFit:true            }) ,            loadMask: true            //			,viewConfig:{forceFit:true}        }); // eo apply        // add paging toolbar        this.bbar = new Ext.PagingToolbar({            store: this.store,            displayInfo: true,            pageSize: 20        });              this.tbar = [{            xtype: 'tbtext',            text: lang_tr.From        },{            xtype: 'datefield',            id: 'fd_d_financial_from',            format:'Y-m-d H:i:s',            width: 120,            value:new Date((new Date()).getFullYear(),(new Date()).getMonth(),(new Date()).getDate()-90)        },{            xtype: 'tbtext',            text: lang_tr.To        },{            xtype: 'datefield',            id: 'fd_d_financial_to',            format:'Y-m-d H:i:s',            width: 120,            value:new Date((new Date()).getFullYear(),(new Date()).getMonth(),(new Date()).getDate()+1)        },{            xtype: 'tbfill'        },{            xtype: 'tbtext',            text: EzDesk.devices.Locale.E164        },{        	xtype: 'textfield',        	id	: 'endpoint',            name: 'endpoint',			margins:'5 0 1 10',            value: this.data.bind_epno		},{			xtype: 'button',            text: EzDesk.devices.Locale.Query,			width: 80,            name: 'Query',			margins:'5 0 1 1', 			handler: function(){				var from = Ext.getCmp('fd_d_financial_from').getValue();				var to = Ext.getCmp('fd_d_financial_to').getValue();				var endpoint = Ext.get('endpoint').getValue();				var grid = Ext.getCmp('financial_grid_panel');				if(grid){					//alert(grid.xtype);					grid.store.setBaseParam('endpoint', endpoint);					grid.store.setBaseParam('from', from);					grid.store.setBaseParam('to', to);					grid.store.load({						params:{start:0, limit:20}						,callback :function(r,options,success) {								if(!success){								var notifyWin = this.desktop.showNotification({							        html: this.store.reader.jsonData.message.toString()									, title: lang_tr.Error							      });							}						}						,scope:grid										});				}else{					alert('no');				}			}		}];        // call parent        EzDesk.FinancialGrid.superclass.initComponent.apply(this, arguments);    } // eo function initComponent    ,    onRender: function(){        // call parent    	EzDesk.FinancialGrid.superclass.onRender.apply(this, arguments);        // load the store        this.store.load({            params: {                start: 0,                limit: 20            },            callback: function(r, options, success){                if (!success) {                    var notifyWin = this.desktop.showNotification({                        html: this.store.reader.jsonData.message.toString(),                        title: lang_tr.Error                    });                }            },            scope: this        });            } // eo function onRender}); // eo extend gridExt.reg('financial_grid_panel', EzDesk.FinancialGrid);